-- May 3
drop table emp1;

create table emp1(
emp_id int,
emp_name varchar(20),
department_id int,
salary int,
manager_id int,
emp_age int);


insert into emp1
values (1, 'Ankit', 100,10000, 4, 39);
insert into emp1
values (2, 'Mohit', 100, 15000, 5, 48);
insert into emp1
values (3, 'Vikas', 100, 10000,4,37);
insert into emp1
values (4, 'Rohit', 100, 5000, 2, 16);
insert into emp1
values (5, 'Mudit', 200, 12000, 6,55);
insert into emp1
values (6, 'Agam', 200, 12000,2, 14);
insert into emp1
values (7, 'Sanjay', 200, 9000, 2,13);
insert into emp1
values (8, 'Ashish', 200,5000,2,12);
insert into emp1
values (1, 'Saurabh',900,12000,2,51);

select * from emp1;

-- 1: top 3 employees by salaries, within department

with a as(
select emp_name, department_id, salary,
row_number() over(partition by department_id order by salary desc) as top
from emp1)
select * from a where top <= 3;

-- 2: top 2 highest salaried employee

with a as(
select emp_name, salary,
rank() over (order by salary desc) as top
from emp1)
select * from a where top <= 2;

-- 3: yoy growth/product with current month sales more than previous month sales

select * from orders3;

with a as(
select date_format(order_date, "%y-%m") as month, sum(total_amount) as sales
from orders3 group by 1)
select a.*, 
lag(sales,1) over(order by month) as previous_month_sales,
concat(round((sales - lag(sales,1) over(order by month) )*100/ lag(sales,1) over(order by month),2),"%") as growth
from a
order by month;

-- 4: yoy growth/product with current month sales more than previous month sales by customer_id

select * from orders3;

with a as(
select date_format(order_date, "%y-%m") as month, customer_id, sum(total_amount) as sales
from orders3 group by 1,2)
select a.*, 
lag(sales,1) over(partition by customer_id order by month) as previous_month_sales,
concat(round((sales - lag(sales,1) over(partition by customer_id order by month) )*100/ lag(sales,1) over(order by month),2),"%") as growth
from a
order by month,customer_id;

-- 5: running sales/ cummulative sales / rolling n month sales

with a as(
select date_format(order_date, "%y-%m") as month, sum(total_amount) as sales
from orders3 group by 1)
select month, sum(sales) over(order by month) as rolling_sum
from a ;

-- 6: rolling 3 months sales

with a as(
select date_format(order_date, "%y-%m") as month, sum(total_amount) as sales
from orders3 group by 1)
select month, sales, 
 sum(sales) over(order by month) as rolling_sum,
sum(sales) over(order by month rows between 2 preceding and current row) as 3month_rolling_sum
from a;

-- 7: find users who purchased different products on different dates.
-- i.e - product purchased on any given day are not repeated on any other day

select * from purchase_history;

with a as (
select userid from purchase_history
group by userid having count(distinct purchasedate) > 1),
b as (
select userid, count(productid) as ct1, 
count(distinct productid) as ct2  
from purchase_history 
where userid in (select userid from a)
group by 1)
select userid from b where ct1 = ct2;



